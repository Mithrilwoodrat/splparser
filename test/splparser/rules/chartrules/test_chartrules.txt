
Below are clips from an interactive session in which I test various aspects of the parser.

>>> import splparser.parser

>>> splparser.parse("chart sum(A) by A span=log2").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('FUNCTION': 'groupby')
                ('FUNCTION': 'sum')
                    ('FIELD': 'A')
                ('GROUPING_FIELD': 'A')
            ('EQ': 'assign')
                ('OPTION': 'span')
                ('VALUE': 'log2')

>>> splparser.parse('chart count(eval(method="GET")) AS GET, count(eval(method="POST")) AS POST by host').print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('FUNCTION': 'groupby')
                ('FUNCTION': 'as')
                    ('FUNCTION': 'count')
                        ('FUNCTION': 'eval')
                            ('FUNCTION': 'eq')
                                ('FIELD': 'method')
                                ('VALUE': '"GET"')
                    ('FIELD': 'GET')
                ('FUNCTION': 'as')
                    ('FUNCTION': 'count')
                        ('FUNCTION': 'eval')
                            ('FUNCTION': 'eq')
                                ('FIELD': 'method')
                                ('VALUE': '"POST"')
                    ('FIELD': 'POST')
                ('GROUPING_DEFAULT_FIELD': 'host')

>>> splparser.parse("chart count by duration span=log2").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('FUNCTION': 'groupby')
                ('FUNCTION': 'count')
                ('GROUPING_FIELD': 'duration')
            ('EQ': 'assign')
                ('OPTION': 'span')
                ('VALUE': 'log2')

>>> splparser.parse("chart avg(eventcount) by duration span=log2").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('FUNCTION': 'groupby')
                ('FUNCTION': 'avg')
                    ('FIELD': 'eventcount')
                ('GROUPING_FIELD': 'duration')
            ('EQ': 'assign')
                ('OPTION': 'span')
                ('VALUE': 'log2')

>>> splparser.parse("chart dc(clientip) over date_hour by category_id usenull=f").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('FUNCTION': 'groupby')
                ('FUNCTION': 'over')
                    ('FUNCTION': 'dc')
                        ('FIELD': 'clientip')
                    ('OVER_FIELD': 'date_hour')
                ('GROUPING_FIELD': 'category_id')
            ('EQ': 'assign')
                ('OPTION': 'usenull')
                ('VALUE': 'f')

>>> splparser.parse("chart count over Magnitude by Region useother=f").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('FUNCTION': 'groupby')
                ('FUNCTION': 'over')
                    ('FUNCTION': 'count')
                    ('OVER_FIELD': 'Magnitude')
                ('GROUPING_FIELD': 'Region')
            ('EQ': 'assign')
                ('OPTION': 'useother')
                ('VALUE': 'f')

>>> splparser.parse("chart max(delay) over foo").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('FUNCTION': 'over')
                ('FUNCTION': 'max')
                    ('FIELD': 'delay')
                ('OVER_FIELD': 'foo')

>>> splparser.parse("chart eval(avg(size)/max(delay)) AS ratio by host user").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('FUNCTION': 'groupby')
                ('FUNCTION': 'as')
                    ('FUNCTION': 'eval')
                        ('FUNCTION': 'divides')
                            ('FUNCTION': 'avg')
                                ('FIELD': 'size')
                            ('FUNCTION': 'max')
                                ('FIELD': 'delay')
                    ('FIELD': 'ratio')
                ('GROUPING_DEFAULT_FIELD': 'host')
                ('GROUPING_FIELD': 'user')

>>> splparser.parse("chart max(delay) by size bins=10").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('FUNCTION': 'groupby')
                ('FUNCTION': 'max')
                    ('FIELD': 'delay')
                ('GROUPING_FIELD': 'size')
            ('EQ': 'assign')
                ('OPTION': 'bins')
                ('VALUE': '10')

>>> splparser.parse('chart count(eval(OnAccessRead="false")) as OnAccessRead count(eval(OnAccessWrite="false")) as OnAccessWrite count(eval(OnAccessRename="false")) as OnAccessRename count(eval(OnAccessCleanup="false")) as OnAccessCleanup count(eval(OnAccessSuspect="false")) as OnAccessSuspect count(eval(HIPSSuspect="false")) as HIPSSuspect count(eval(HIPSBlock="true")) as HIPSBlock count(eval(BOEPEnabled="false")) as BOEPEnabled by ConsoleName').print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('FUNCTION': 'groupby')
                ('FUNCTION': 'as')
                    ('FUNCTION': 'count')
                        ('FUNCTION': 'eval')
                            ('FUNCTION': 'eq')
                                ('FIELD': 'OnAccessRead')
                                ('VALUE': '"false"')
                    ('FIELD': 'OnAccessRead')
                ('FUNCTION': 'as')
                    ('FUNCTION': 'count')
                        ('FUNCTION': 'eval')
                            ('FUNCTION': 'eq')
                                ('FIELD': 'OnAccessWrite')
                                ('VALUE': '"false"')
                    ('FIELD': 'OnAccessWrite')
                ('FUNCTION': 'as')
                    ('FUNCTION': 'count')
                        ('FUNCTION': 'eval')
                            ('FUNCTION': 'eq')
                                ('FIELD': 'OnAccessRename')
                                ('VALUE': '"false"')
                    ('FIELD': 'OnAccessRename')
                ('FUNCTION': 'as')
                    ('FUNCTION': 'count')
                        ('FUNCTION': 'eval')
                            ('FUNCTION': 'eq')
                                ('FIELD': 'OnAccessCleanup')
                                ('VALUE': '"false"')
                    ('FIELD': 'OnAccessCleanup')
                ('FUNCTION': 'as')
                    ('FUNCTION': 'count')
                        ('FUNCTION': 'eval')
                            ('FUNCTION': 'eq')
                                ('FIELD': 'OnAccessSuspect')
                                ('VALUE': '"false"')
                    ('FIELD': 'OnAccessSuspect')
                ('FUNCTION': 'as')
                    ('FUNCTION': 'count')
                        ('FUNCTION': 'eval')
                            ('FUNCTION': 'eq')
                                ('FIELD': 'HIPSSuspect')
                                ('VALUE': '"false"')
                    ('FIELD': 'HIPSSuspect')
                ('FUNCTION': 'as')
                    ('FUNCTION': 'count')
                        ('FUNCTION': 'eval')
                            ('FUNCTION': 'eq')
                                ('FIELD': 'HIPSBlock')
                                ('VALUE': '"true"')
                    ('FIELD': 'HIPSBlock')
                ('FUNCTION': 'as')
                    ('FUNCTION': 'count')
                        ('FUNCTION': 'eval')
                            ('FUNCTION': 'eq')
                                ('FIELD': 'BOEPEnabled')
                                ('VALUE': '"false"')
                    ('FIELD': 'BOEPEnabled')
                ('GROUPING_FIELD': 'ConsoleName')

TODO: Should this last by apply to the whole list?

>>> splparser.parse("chart count() by host").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('FUNCTION': 'groupby')
                ('FUNCTION': 'count')
                ('GROUPING_DEFAULT_FIELD': 'host')

>>> splparser.parse('chart limit=8 dc(id) AS "Tempfails" BY  rcptdom').print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('EQ': 'assign')
                ('OPTION': 'limit')
                ('VALUE': '8')
            ('FUNCTION': 'groupby')
                ('FUNCTION': 'as')
                    ('FUNCTION': 'dc')
                        ('FIELD': 'id')
                    ('FIELD': '"Tempfails"')
                ('GROUPING_FIELD': 'rcptdom')

>>> splparser.parse("chart sum(cpuTime) sum(runTime) sum(cacheTime) sum(networkWriteTime) stdev(cpuTime) stdev(runTime) stdev(cacheTime) stdev(networkWriteTime) count over methodName").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('FUNCTION': 'over')
                ('FUNCTION': 'sum')
                    ('FIELD': 'cpuTime')
                ('FUNCTION': 'sum')
                    ('FIELD': 'runTime')
                ('FUNCTION': 'sum')
                    ('FIELD': 'cacheTime')
                ('FUNCTION': 'sum')
                    ('FIELD': 'networkWriteTime')
                ('FUNCTION': 'stdev')
                    ('FIELD': 'cpuTime')
                ('FUNCTION': 'stdev')
                    ('FIELD': 'runTime')
                ('FUNCTION': 'stdev')
                    ('FIELD': 'cacheTime')
                ('FUNCTION': 'stdev')
                    ('FIELD': 'networkWriteTime')
                ('FUNCTION': 'count')
                ('OVER_FIELD': 'methodName')

This was in the logs but I can't verify that it's allowable: splparser.parse('chart "Total Upload MB" over SSL by DOMAIN').print_tree()

>>> splparser.parse('chart sparkline sum("Client2ServerBytes") as "MB" by DOMAIN').print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('EQ': 'assign')
                ('OPTION': 'sparkline')
                ('VALUE': 'true')
            ('FUNCTION': 'groupby')
                ('FUNCTION': 'as')
                    ('FUNCTION': 'sum')
                        ('FIELD': '"Client2ServerBytes"')
                    ('FIELD': '"MB"')
                ('GROUPING_FIELD': 'DOMAIN')

I don't think this should be allowed either: splparser.parse("chart span=1d top 20 logRecordType").print_tree()

>>> splparser.parse("chart count (SHORT_EVT_NAME) over LENDERFIELD").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('FUNCTION': 'over')
                ('FUNCTION': 'count')
                    ('FIELD': 'SHORT_EVT_NAME')
                ('OVER_FIELD': 'LENDEROVER_FIELD')

>>> splparser.parse("chart perc97(duration) as Laufzeit by firma").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('FUNCTION': 'groupby')
                ('FUNCTION': 'as')
                    ('FUNCTION': 'perc97')
                        ('FIELD': 'duration')
                    ('FIELD': 'Laufzeit')
                ('GROUPING_FIELD': 'firma')

>>> splparser.parse('chart count, eval(eval(action="deliver") + eval(action="render"))  as Render by action').print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'chart')
            ('FUNCTION': 'groupby')
                ('FUNCTION': 'count')
                ('FUNCTION': 'as')
                    ('FUNCTION': 'eval')
                        ('FUNCTION': 'plus')
                            ('FUNCTION': 'eval')
                                ('FUNCTION': 'eq')
                                    ('FIELD': 'action')
                                    ('VALUE': '"deliver"')
                            ('FUNCTION': 'eval')
                                ('FUNCTION': 'eq')
                                    ('FIELD': 'action')
                                    ('VALUE': '"render"')
                    ('FIELD': 'Render')
                ('GROUPING_FIELD': 'action')

Also in data set but probably not allowed: splparser.parse("chart (get_request)  as COUNT").print_tree()
