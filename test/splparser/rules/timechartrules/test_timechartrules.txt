
Below are clips from an interactive session in which I test various aspects of the parser.

>>> import splparser.parser

>>> splparser.parse("timechart count").print_tree()
('ROOT')
    ('STAGE')
        ('TIMECHART')
            ('COUNT')

>>> splparser.parse("timechart count by IPAddress").print_tree()
('ROOT')
    ('STAGE')
        ('TIMECHART')
            ('COUNT')
                ('BY')
                    ('WORD': 'IPAddress')

>>> splparser.parse("timechart count(connection_id) by connection_id").print_tree()
('ROOT')
    ('STAGE')
        ('TIMECHART')
            ('COUNT')
                ('ID': 'connection_id')
                ('BY')
                    ('ID': 'connection_id')

>>> splparser.parse("timechart span=1hr count by host").print_tree()
('ROOT')
    ('STAGE')
        ('TIMECHART')
            ('EQ')
                ('SPAN')
                ('ID': '1hr')
            ('COUNT')
                ('BY')
                    ('WORD': 'host')

>>> splparser.parse("timechart span=1d count by cdi_businessunit limit=20").print_tree()
('ROOT')
    ('STAGE')
        ('TIMECHART')
            ('EQ')
                ('SPAN')
                ('ID': '1d')
            ('COUNT')
                ('BY')
                    ('ID': 'cdi_businessunit')
            ('EQ')
                ('LIMIT')
                ('INT': '20')

>>> splparser.parse("timechart limit=5 span=1w usenull=f useother=f dc(dest_host) by Vendor").print_tree()
('ROOT')
    ('STAGE')
        ('TIMECHART')
            ('EQ')
                ('LIMIT')
                ('INT': '5')
            ('EQ')
                ('SPAN')
                ('ID': '1w')
            ('EQ')
                ('USENULL')
                ('WORD': 'f')
            ('EQ')
                ('USEOTHER')
                ('WORD': 'f')
            ('DC')
                ('ID': 'dest_host')
                ('BY')
                    ('WORD': 'Vendor')

>>> splparser.parse('timechart span=1w dc(dest_host) as PCs, count(eval(match(VulnTracked,"1"))) AS Vulns').print_tree()
('ROOT')
    ('STAGE')
        ('TIMECHART')
            ('EQ')
                ('SPAN')
                ('ID': '1w')
            ('DC')
                ('ID': 'dest_host')
                ('AS')
                    ('WORD': 'PCs')
            ('COUNT')
                ('EVAL')
                    ('MATCH')
                        ('WORD': 'VulnTracked')
                        ('INT': '"1"')
                ('AS')
                    ('WORD': 'Vulns')

>>> splparser.parse("timechart limit=5 span=1w dc(dest_host) as Global_Tracked_Vuln_Count usenull=f useother=f").print_tree()
('ROOT')
    ('STAGE')
        ('TIMECHART')
            ('EQ')
                ('LIMIT')
                ('INT': '5')
            ('EQ')
                ('SPAN')
                ('ID': '1w')
            ('DC')
                ('ID': 'dest_host')
                ('AS')
                    ('ID': 'Global_Tracked_Vuln_Count')
            ('EQ')
                ('USENULL')
                ('WORD': 'f')
            ('EQ')
                ('USEOTHER')
                ('WORD': 'f')

>>> splparser.parse('timechart span=24h eval(count(eval(cache="hit")) / (count(eval(cache="hit")) + count(eval(cache="miss")))) as percent, count as totalRequests, p50(responseTime) as p50, p95(responseTime) as p95, p99(responseTime) as p99').print_tree()
('ROOT')
    ('STAGE')
        ('TIMECHART')
            ('EQ')
                ('SPAN')
                ('ID': '24h')
            ('EVAL')
                ('DIVIDE')
                    ('COUNT')
                        ('EVAL')
                            ('EQ')
                                ('WORD': 'cache')
                                ('WORD': '"hit"')
                    ('PLUS')
                        ('COUNT')
                            ('EVAL')
                                ('EQ')
                                    ('WORD': 'cache')
                                    ('WORD': '"hit"')
                        ('COUNT')
                            ('EVAL')
                                ('EQ')
                                    ('WORD': 'cache')
                                    ('WORD': '"miss"')
                ('AS')
                    ('WORD': 'percent')
            ('COUNT')
                ('AS')
                    ('WORD': 'totalRequests')
            ('P50')
                ('WORD': 'responseTime')
                ('AS')
                    ('WORD': 'p50')
            ('P95')
                ('WORD': 'responseTime')
                ('AS')
                    ('WORD': 'p95')
            ('P99')
                ('WORD': 'responseTime')
                ('AS')
                    ('WORD': 'p99')

>>> splparser.parse("timechart span=1d first(eval(if(google_videos>=0,google_videos,null()))) as google_videos, first(eval(if(bing_videos>=0,bing_videos,null()))) as bing_videos, first(eval(if(yahoo_videos>=0,yahoo_videos,null()))) as yahoo_videos").print_tree()
('ROOT')
    ('STAGE')
        ('TIMECHART')
            ('EQ')
                ('SPAN')
                ('ID': '1d')
            ('FIRST')
                ('EVAL')
                    ('IF')
                        ('GE')
                            ('ID': 'google_videos')
                            ('ID': '0')
                        ('ID': 'google_videos')
                        ('NULL')
                ('AS')
                    ('ID': 'google_videos')
            ('FIRST')
                ('EVAL')
                    ('IF')
                        ('GE')
                            ('ID': 'bing_videos')
                            ('ID': '0')
                        ('ID': 'bing_videos')
                        ('NULL')
                ('AS')
                    ('ID': 'bing_videos')
            ('FIRST')
                ('EVAL')
                    ('IF')
                        ('GE')
                            ('ID': 'yahoo_videos')
                            ('ID': '0')
                        ('ID': 'yahoo_videos')
                        ('NULL')
                ('AS')
                    ('ID': 'yahoo_videos')

>>> splparser.parse("timechart span=1w `summary_unattributed_counts`").print_tree()
('ROOT')
    ('STAGE')
        ('TIMECHART')
            ('EQ')
                ('SPAN')
                ('ID': '1w')
            ('MACRO': '`summary_unattributed_counts`')
