
Below are clips from an interactive session in which I test various aspects of the parser.

>>> import splparser.parser

>>> splparser.parse('eval report_duration="1 Day"').print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'eval')
            ('EQ')
                ('FIELD': 'report_duration')
                ('VALUE': '"1 Day"')

>>> splparser.parse('eval detailed_report="Timestamp=".end_time." - New_HPA_notinHPAlist=".New_HPA_notinHPAlist." - New_HPA_SSO=".New_HPA_SSO." - New_hpa_business=".New_hpa_business." -  HPA_group_added_to=".HPA_group_added_to." -  host_role=".host_role." - OperatorAccount=".OperatorAccount." -  Operator_SSO=".Operator_SSO." -  Operator_business=".Operator_business." -  dest_host=".dest_host." -  dest_businessunit=".dest_businessunit." ;"').print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'eval')
            ('EQ')
                ('FIELD': 'detailed_report')
                ('FUNCTION': 'concat')
                    ('VALUE': '"Timestamp="')
                    ('FIELD': 'end_time')
                    ('VALUE': '" - New_HPA_notinHPAlist="')
                    ('FIELD': 'New_HPA_notinHPAlist')
                    ('VALUE': '" - New_HPA_SSO="')
                    ('FIELD': 'New_HPA_SSO')
                    ('VALUE': '" - New_hpa_business="')
                    ('FIELD': 'New_hpa_business')
                    ('VALUE': '" -  HPA_group_added_to="')
                    ('FIELD': 'HPA_group_added_to')
                    ('VALUE': '" -  host_role="')
                    ('FIELD': 'host_role')
                    ('VALUE': '" - OperatorAccount="')
                    ('FIELD': 'OperatorAccount')
                    ('VALUE': '" -  Operator_SSO="')
                    ('FIELD': 'Operator_SSO')
                    ('VALUE': '" -  Operator_business="')
                    ('FIELD': 'Operator_business')
                    ('VALUE': '" -  dest_host="')
                    ('FIELD': 'dest_host')
                    ('VALUE': '" -  dest_businessunit="')
                    ('FIELD': 'dest_businessunit')
                    ('VALUE': '" ;"')

>>> splparser.parse("eval dest_host=lower(dest_host)").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'eval')
            ('EQ')
                ('FIELD': 'dest_host')
                ('FUNCTION': 'lower')
                    ('FIELD': 'dest_host')

>>> splparser.parse("eval notrequired=nullif(user,user_effected)").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'eval')
            ('EQ')
                ('FIELD': 'notrequired')
                ('FUNCTION': 'nullif')
                    ('FIELD': 'user')
                    ('FIELD': 'user_effected')

>>> splparser.parse('eval status_user=case(authority_allobj=="Y","HPAUser",authority_secadm=="Y","HPAUser")').print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'eval')
            ('EQ')
                ('FIELD': 'status_user')
                ('FUNCTION': 'case')
                    ('FUNCTION': 'deq')
                        ('FIELD': 'authority_allobj')
                        ('VALUE': '"Y"')
                    ('VALUE': '"HPAUser"')
                    ('FUNCTION': 'deq')
                        ('FIELD': 'authority_secadm')
                        ('VALUE': '"Y"')
                    ('VALUE': '"HPAUser"')

>>> splparser.parse("eval figure=round(patchable_defects/endpoint_opportunities, 2)").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'eval')
            ('EQ')
                ('FIELD': 'figure')
                ('FUNCTION': 'round')
                    ('FUNCTION': 'divides')
                        ('FIELD': 'patchable_defects')
                        ('FIELD': 'endpoint_opportunities')
                    ('VALUE': '2')

>>> splparser.parse("eval count=tmp1-tmp2").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'eval')
            ('EQ')
                ('FIELD': 'count')
                ('FUNCTION': 'minus')
                    ('FIELD': 'tmp1')
                    ('FIELD': 'tmp2')

>>> splparser.parse('eval Company=case(Vendor LIKE "%MS1%" OR Vendor LIKE "%MS0%" OR Title LIKE "%KB%","Microsoft",Vendor LIKE "%APS%","Adobe",Title LIKE "%Java%","Java")').print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'eval')
            ('EQ')
                ('FIELD': 'Company')
                ('FUNCTION': 'case')
                    ('FUNCTION': 'OR')
                        ('FUNCTION': 'LIKE')
                            ('FIELD': 'Vendor')
                            ('VALUE': '"%MS1%"')
                        ('FUNCTION': 'LIKE')
                            ('FIELD': 'Vendor')
                            ('VALUE': '"%MS0%"')
                        ('FUNCTION': 'LIKE')
                            ('FIELD': 'Title')
                            ('VALUE': '"%KB%"')
                    ('VALUE': '"Microsoft"')
                    ('FUNCTION': 'LIKE')
                        ('FIELD': 'Vendor')
                        ('VALUE': '"%APS%"')
                    ('VALUE': '"Adobe"')
                    ('FUNCTION': 'LIKE')
                        ('FIELD': 'Title')
                        ('VALUE': '"%Java%"')
                    ('VALUE': '"Java"')

>>> splparser.parse("eval visitor_value_buyers_only = round(total_revenue/visitors_with_transactions, 2)").print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'eval')
            ('EQ')
                ('FIELD': 'visitor_value_buyers_only')
                ('FUNCTION': 'round')
                    ('FUNCTION': 'divides')
                        ('FIELD': 'total_revenue')
                        ('FIELD': 'visitors_with_transactions')
                    ('VALUE': '2')

>>> splparser.parse('eval visitor_conversion_rate_buyers_only = tostring(round(Transactions/visitors_with_transactions*100, 2))."%"').print_tree()
('ROOT')
    ('STAGE')
        ('COMMAND': 'eval')
            ('EQ')
                ('FIELD': 'visitor_conversion_rate_buyers_only')
                ('FUNCTION': 'concat')
                    ('FUNCTION': 'tostring')
                        ('FUNCTION': 'round')
                            ('FUNCTION': 'times')
                                ('FUNCTION': 'divides')
                                    ('FIELD': 'Transactions')
                                    ('FIELD': 'visitors_with_transactions')
                                ('VALUE': '100')
                            ('VALUE': '2')
                    ('VALUE': '"%"')
