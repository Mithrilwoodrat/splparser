
Below are clips from an interactive session in which I test various aspects of the parser.

>>> import splparser.parser

>>> splparser.parse("search foo | search bat | search blah | stats count").print_tree()
('ROOT')
    ('STAGE')
        ('SEARCH')
            ('WORD': 'foo')
    ('STAGE')
        ('SEARCH')
            ('WORD': 'bat')
    ('STAGE')
        ('SEARCH')
            ('WORD': 'blah')
    ('STAGE')
        ('STATS')
            ('COUNT')

>>> splparser.parse("stats count, count").print_tree()
('ROOT')
    ('STAGE')
        ('STATS')
            ('COUNT')
            ('COUNT')

>>> splparser.parse("stats count a").print_tree()
('ROOT')
    ('STAGE')
        ('STATS')
            ('COUNT')
                ('WORD': 'a')

>>> splparser.parse("stats count a, count b").print_tree()
('ROOT')
    ('STAGE')
        ('STATS')
            ('COUNT')
                ('WORD': 'a')
            ('COUNT')
                ('WORD': 'b')

>>> splparser.parse("stats count(f)").print_tree()
('ROOT')
    ('STAGE')
        ('STATS')
            ('COUNT')
                ('WORD': 'f')

>>> splparser.parse("stats count(f) as cf").print_tree()
('ROOT')
    ('STAGE')
        ('STATS')
            ('COUNT')
                ('WORD': 'f')
                ('AS')
                    ('WORD': 'cf')

>>> splparser.parse("stats count(f) by b").print_tree()
('ROOT')
    ('STAGE')
        ('STATS')
            ('COUNT')
                ('WORD': 'f')
                ('BY')
                    ('WORD': 'b')

>>> splparser.parse("stats count(f) by b, d").print_tree()
('ROOT')
    ('STAGE')
        ('STATS')
            ('COUNT')
                ('WORD': 'f')
                ('BY')
                    ('WORD': 'b')
                    ('WORD': 'd')

>>> splparser.parse("stats count(f) as a by b, d").print_tree()
('ROOT')
    ('STAGE')
        ('STATS')
            ('COUNT')
                ('WORD': 'f')
                ('AS')
                    ('WORD': 'a')
                ('BY')
                    ('WORD': 'b')
                    ('WORD': 'd')

>>> splparser.parse('search sourcetype=access_* | stats eval(method="GET") AS GET').print_tree()
('ROOT')
    ('STAGE')
        ('SEARCH')
            ('EQ')
                ('SOURCETYPE')
                ('ID': 'access_*')
    ('STAGE')
        ('STATS')
            ('EVAL')
                ('EQ')
                    ('WORD': 'method')
                    ('WORD': '"GET"')
                ('AS')
                    ('WORD': 'GET')

>>> splparser.parse('search sourcetype=access_* | stats count(eval(method="GET")) AS GET').print_tree()
('ROOT')
    ('STAGE')
        ('SEARCH')
            ('EQ')
                ('SOURCETYPE')
                ('ID': 'access_*')
    ('STAGE')
        ('STATS')
            ('COUNT')
                ('EVAL')
                    ('EQ')
                        ('WORD': 'method')
                        ('WORD': '"GET"')
                ('AS')
                    ('WORD': 'GET')

>>> splparser.parse('search sourcetype=access_* | stats count(eval(method="GET")) AS GET, count(eval(method="POST")) AS POST by host').print_tree()
('ROOT')
    ('STAGE')
        ('SEARCH')
            ('EQ')
                ('SOURCETYPE')
                ('ID': 'access_*')
    ('STAGE')
        ('STATS')
            ('COUNT')
                ('EVAL')
                    ('EQ')
                        ('WORD': 'method')
                        ('WORD': '"GET"')
                ('AS')
                    ('WORD': 'GET')
            ('COUNT')
                ('EVAL')
                    ('EQ')
                        ('WORD': 'method')
                        ('WORD': '"POST"')
                ('AS')
                    ('WORD': 'POST')
                ('BY')
                    ('WORD': 'host')
