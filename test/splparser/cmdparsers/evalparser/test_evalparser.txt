
Below are clips from an interactive session in which I test various aspects of the parser.

>>> import splparser.parser

>>> parsed = splparser.parser.parse('eval report_duration="1 Day"')
>>> parsed.print_tree()
('ROOT')
    ('STAGE')
        ('EVAL')
            ('EVALEXPR')
                ('ID': 'report_duration')
                ('LITERAL': '"1 Day"')

>>> parsed = splparser.parser.parse('eval detailed_report="Timestamp=".end_time." - New_HPA_notinHPAlist=".New_HPA_notinHPAlist." - New_HPA_SSO=".New_HPA_SSO." - New_hpa_business=".New_hpa_business." -  HPA_group_added_to=".HPA_group_added_to." -  host_role=".host_role." - OperatorAccount=".OperatorAccount." -  Operator_SSO=".Operator_SSO." -  Operator_business=".Operator_business." -  dest_host=".dest_host." -  dest_businessunit=".dest_businessunit." ;"')
>>> parsed.print_tree()
('ROOT')
    ('STAGE')
        ('EVAL')
            ('EVALEXPR')
                ('ID': 'detailed_report')
                ('CONCAT')
                    ('NBSTR': '"Timestamp="')
                    ('ID': 'end_time')
                    ('LITERAL': '" - New_HPA_notinHPAlist="')
                    ('ID': 'New_HPA_notinHPAlist')
                    ('LITERAL': '" - New_HPA_SSO="')
                    ('ID': 'New_HPA_SSO')
                    ('LITERAL': '" - New_hpa_business="')
                    ('ID': 'New_hpa_business')
                    ('LITERAL': '" - HPA_group_added_to="')
                    ('ID': 'HPA_group_added_to')
                    ('LITERAL': '" - host_role="')
                    ('ID': 'host_role')
                    ('LITERAL': '" - OperatorAccount="')
                    ('WORD': 'OperatorAccount')
                    ('LITERAL': '" - Operator_SSO="')
                    ('ID': 'Operator_SSO')
                    ('LITERAL': '" - Operator_business="')
                    ('ID': 'Operator_business')
                    ('LITERAL': '" - dest_host="')
                    ('ID': 'dest_host')
                    ('LITERAL': '" - dest_businessunit="')
                    ('ID': 'dest_businessunit')
                    ('NBSTR': '" ;"')

>>> parsed = splparser.parser.parse("eval dest_host=lower(dest_host)")
>>> parsed.print_tree()
('ROOT')
    ('STAGE')
        ('EVAL')
            ('EVALEXPR')
                ('ID': 'dest_host')
                ('LOWER')
                    ('ID': 'dest_host')

>>> parsed = splparser.parser.parse("eval notrequired=nullif(user,user_effected)")
>>> parsed.print_tree()
('ROOT')
    ('STAGE')
        ('EVAL')
            ('EVALEXPR')
                ('WORD': 'notrequired')
                ('NULLIF')
                    ('WORD': 'user')
                    ('ID': 'user_effected')

>>> parsed = splparser.parser.parse('eval status_user=case(authority_allobj=="Y","HPAUser",authority_secadm=="Y","HPAUser")')
>>> parsed.print_tree()
('ROOT')
    ('STAGE')
        ('EVAL')
            ('EVALEXPR')
                ('ID': 'status_user')
                ('CASE')
                    ('DEQ')
                        ('ID': 'authority_allobj')
                        ('WORD': '"Y"')
                    ('WORD': '"HPAUser"')
                    ('DEQ')
                        ('ID': 'authority_secadm')
                        ('WORD': '"Y"')
                    ('WORD': '"HPAUser"')

>>> parsed = splparser.parser.parse("eval figure=round(patchable_defects/endpoint_opportunities, 2)")
>>> parsed.print_tree()
('ROOT')
    ('STAGE')
        ('EVAL')
            ('EVALEXPR')
                ('WORD': 'figure')
                ('ROUND')
                    ('DIVIDE')
                        ('ID': 'patchable_defects')
                        ('ID': 'endpoint_opportunities')
                    ('INT': '2')

>>> parsed = splparser.parser.parse("eval count=tmp1-tmp2")
>>> parsed.print_tree()
('ROOT')
    ('STAGE')
        ('EVAL')
            ('EVALEXPR')
                ('WORD': 'count')
                ('MINUS')
                    ('ID': 'tmp1')
                    ('ID': 'tmp2')

>>> parsed = splparser.parser.parse('eval Company=case(Vendor LIKE "%MS1%" OR Vendor LIKE "%MS0%" OR Title LIKE "%KB%","Microsoft",Vendor LIKE "%APS%","Adobe",Title LIKE "%Java%","Java")')
>>> parsed.print_tree()
('ROOT')
    ('STAGE')
        ('EVAL')
            ('EVALEXPR')
                ('WORD': 'Company')
                ('CASE')
                    ('OR')
                        ('LIKE')
                            ('WORD': 'Vendor')
                            ('NBSTR': '"%MS1%"')
                        ('LIKE')
                            ('WORD': 'Vendor')
                            ('NBSTR': '"%MS0%"')
                        ('LIKE')
                            ('WORD': 'Title')
                            ('NBSTR': '"%KB%"')
                    ('WORD': '"Microsoft"')
                    ('LIKE')
                        ('WORD': 'Vendor')
                        ('NBSTR': '"%APS%"')
                    ('WORD': '"Adobe"')
                    ('LIKE')
                        ('WORD': 'Title')
                        ('NBSTR': '"%Java%"')
                    ('WORD': '"Java"')

>>> parsed = splparser.parser.parse("eval visitor_value_buyers_only = round(total_revenue/visitors_with_transactions, 2)")
>>> parsed.print_tree()
('ROOT')
    ('STAGE')
        ('EVAL')
            ('EVALEXPR')
                ('ID': 'visitor_value_buyers_only')
                ('ROUND')
                    ('DIVIDE')
                        ('ID': 'total_revenue')
                        ('ID': 'visitors_with_transactions')
                    ('INT': '2')

>>> parsed = splparser.parser.parse('eval visitor_conversion_rate_buyers_only = tostring(round(Transactions/visitors_with_transactions*100, 2))."%"')
>>> parsed.print_tree()
('ROOT')
    ('STAGE')
        ('EVAL')
            ('EVALEXPR')
                ('ID': 'visitor_conversion_rate_buyers_only')
                ('CONCAT')
                    ('TOSTRING')
                        ('ROUND')
                            ('DIVIDE')
                                ('WORD': 'Transactions')
                                ('TIMES')
                                    ('ID': 'visitors_with_transactions')
                                    ('INT': '100')
                            ('INT': '2')
                    ('NBSTR': '"%"')
